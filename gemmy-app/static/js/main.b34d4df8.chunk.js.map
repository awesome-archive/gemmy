{"version":3,"sources":["lib/gemmy.js","App.js","lib/utils.js","serviceWorker.js","index.js","logo.svg"],"names":["GEMMY_BASE_URL","GemmyClient","Object","classCallCheck","this","createClass","key","value","fetch","concat","then","resp","json","App","props","_this","possibleConstructorReturn","getPrototypeOf","call","state","hitGem","fetchIndex","indexData","console","log","min","max","hitNum","total_count","Math","ceil","floor","random","pageNum","pagination","size","inPageOffset","text","split","setState","react_default","a","createElement","className","src","logo","alt","href","target","rel","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"yOAAaA,SAAc,iEAEdC,EAAb,WACI,SAAAA,IAAeC,OAAAC,EAAA,EAAAD,CAAAE,KAAAH,GADnB,OAAAC,OAAAG,EAAA,EAAAH,CAAAD,EAAA,EAAAK,IAAA,aAAAC,MAAA,WAKQ,OAAOC,MAAK,GAAAC,OAAIT,EAAJ,sBAAuCU,KAAK,SAAAC,GAEpD,OADWA,EAAKC,aAN5BX,EAAA,OCiDeY,cA3Cb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAb,OAAAC,EAAA,EAAAD,CAAAE,KAAAS,IACjBE,EAAAb,OAAAc,EAAA,EAAAd,CAAAE,KAAAF,OAAAe,EAAA,EAAAf,CAAAW,GAAAK,KAAAd,KAAMU,KACDK,MAAQ,CAACC,OAAQ,KAEb,IAAInB,GACVoB,aAAaX,KAAK,SAAAY,GACnBC,QAAQC,IAAI,kBAAmBF,GAC/B,ICfoBG,EAAKC,EDerBC,GCfgBF,EDeG,ECfEC,EDeCJ,EAAUM,YCdtCH,EAAMI,KAAKC,KAAKL,GAChBC,EAAMG,KAAKE,MAAML,GACVG,KAAKE,MAAMF,KAAKG,UAAYN,EAAMD,EAAM,IAAMA,GDa/CQ,EAAUJ,KAAKC,KAAKH,EAASL,EAAUY,WAAWC,MAClDC,EAAeT,EAASL,EAAUY,WAAWC,KACjDZ,QAAQC,IAAR,WAAAf,OAAuBkB,EAAvB,cAAAlB,OAA0CwB,EAA1C,UAAAxB,OAA0D2B,IAC1D5B,MAAK,GAAAC,OAAIT,EAAJ,UAAAS,OAA2BwB,IAAWvB,KAAK,SAAAC,GAC9CA,EAAK0B,OAAO3B,KAAK,SAAA2B,GACf,IACIjB,EADQiB,EAAKC,MAAM,MACJF,EAAe,GAClCb,QAAQC,IAAI,OAAQJ,GACpBL,EAAKwB,SAAS,CACZnB,OAAQA,UAjBCL,wEAwBjB,OACEyB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCN,EAAAC,EAAAC,cAAA,SACGtC,KAAKe,MAAMC,QAAU,mBAExBoB,EAAAC,EAAAC,cAAA,KACEC,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,iCApCEC,aEKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrD,KAAK,SAAAsD,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.b34d4df8.chunk.js","sourcesContent":["export const GEMMY_BASE_URL = `https://raw.githubusercontent.com/wonderbeyond/gemmy/gh-pages`\n\nexport class GemmyClient {\n    constructor() {\n    }\n\n    fetchIndex() {\n        return fetch(`${GEMMY_BASE_URL}/gemmy-index.json`).then(resp => {\n            let data = resp.json()\n            return data\n        })\n    }\n}\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {GemmyClient, GEMMY_BASE_URL} from './lib/gemmy';\nimport {randomInt} from './lib/utils';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {hitGem: ''}\n\n    let gm = new GemmyClient()\n    gm.fetchIndex().then(indexData => {\n      console.log('New index data:', indexData)\n      let hitNum = randomInt(1, indexData.total_count)  // starts from 1\n      let pageNum = Math.ceil(hitNum / indexData.pagination.size)\n      let inPageOffset = hitNum % indexData.pagination.size\n      console.log(`Hit gem#${hitNum}, at page#${pageNum} line#${inPageOffset}`)\n      fetch(`${GEMMY_BASE_URL}/gems/${pageNum}`).then(resp => {\n        resp.text().then(text => {\n          let lines = text.split('\\n')\n          let hitGem = lines[inPageOffset - 1]\n          console.log('GEM:', hitGem);\n          this.setState({\n            hitGem: hitGem\n          });\n        })\n      })\n    })\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            {this.state.hitGem || \"It's comming...\"}\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          ></a>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","export function randomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}